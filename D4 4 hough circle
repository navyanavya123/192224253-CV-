import cv2
import numpy as np

def detect_circles(image_path, dp=1.2, min_dist=100, param1=100, param2=30, min_radius=0, max_radius=0):
    # Load the image
    image = cv2.imread(image_path, cv2.IMREAD_COLOR)
    if image is None:
        print(f"Error: Could not load image {image_path}")
        return None

    # Convert to grayscale
    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

    # Apply Gaussian blur to reduce noise and improve circle detection
    gray_blurred = cv2.GaussianBlur(gray, (9, 9), 2)

    # Perform Hough Circle Transform
    circles = cv2.HoughCircles(gray_blurred, 
                               cv2.HOUGH_GRADIENT, 
                               dp=dp, 
                               minDist=min_dist, 
                               param1=param1, 
                               param2=param2, 
                               minRadius=min_radius, 
                               maxRadius=max_radius)

    # If some circles are detected, let's draw them on the original image
    if circles is not None:
        circles = np.uint16(np.around(circles))
        for i in circles[0, :]:
            # Draw the outer circle
            cv2.circle(image, (i[0], i[1]), i[2], (0, 255, 0), 2)
            # Draw the center of the circle
            cv2.circle(image, (i[0], i[1]), 2, (0, 0, 255), 3)

    # Display the output
    cv2.imshow('Detected Circles', image)
    cv2.waitKey(0)
    cv2.destroyAllWindows()

    return circles

# Example usage
image_path = 'path_to_your_image.jpg'
circles = detect_circles(image_path)

# Print detected circles
if circles is not None:
    print("Detected circles:")
    print(circles)
else:
    print("No circles detected.")
